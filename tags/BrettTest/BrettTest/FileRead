/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jung1;

import java.io.*;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 *
 * @author Brett
 */
public class FileRead {

//Opens dialog and lets user select a file (No recommendations are made, may select wrong file and not be told)
public File FileChooser(){
        //notification of file open
        JFrame notification = new JFrame();
        JOptionPane.showMessageDialog(notification,"Please selet a test file created by VMPowerScript");
        //new frame, starts at jar directory
        JFrame openFrame = new JFrame();
        JFileChooser file = new JFileChooser(".");
        int openChoice = file.showOpenDialog(openFrame);        
        File selectedFile = null;
        
        //Approves choice and saves it
        if (openChoice == JFileChooser.APPROVE_OPTION)
        {
            selectedFile = file.getSelectedFile();
            System.out.print(selectedFile + " read Succesfully \n");
        }
        //If failure to load exit program (no other workaround at the moment)
        else
        {
            JFrame failure = new JFrame();
            JOptionPane.showMessageDialog(failure, "Failed to load file. Now terminating");  
            System.exit(1);
        }
        
        //return file to the reader
        return selectedFile;
    }     
    
    
    /**
     *
     * @param ChosenFile
     */
public void FileRead(Map<String, NodeData> NodeTable, Map<String, EdgeData> EdgeTable)        
{   
    BufferedReader br = null;
   
    try 
    {
        //Varibles necessary: line, name, f1-f3, counts. Others may be removed and hard coded 
        String sCurrentLine;
        String NodeHashID;
        String EdgeHashID;
        String NodeName;
        String NodeF1;
        String NodeF2;
        String NodeF3;
        Integer NodeCount = 0;
        Integer EdgeCount = 0;
   
        //File Chooser does nothing if null (2nd safety check)
        if((br = new BufferedReader(new FileReader(FileChooser()))) != null);
   
        while ((sCurrentLine = br.readLine()) != null) 
        {                     
            if( sCurrentLine.compareTo("<node>") == 0)
            {                    
                /* For now we are retrieving 3 extra information fields 
                 * could be modified to be more specific by creating more tags such as <switch> <server> etc.
                 * <Node> tag Contains the following
                 *   Name - string
                 *   Field1 - string
                 *   Field2 - string
                 *   Field3 - string
                 */
                   
                //Node Initialization
//              //NodeTable.put(Name String, generated ID, Status String);
                   
                //iterate nodecount
                NodeCount++;       
                    
                //Name Read
                sCurrentLine = br.readLine();
                //System.out.println(sCurrentLine);
                NodeName = sCurrentLine.toLowerCase();                         
                   
                //(Field 1)
                sCurrentLine = br.readLine();
                NodeF1 = sCurrentLine;
                   
                //(Field 2)
                sCurrentLine = br.readLine();
                NodeF2 = sCurrentLine;
                   
                //(Field 3)
                sCurrentLine = br.readLine();
                NodeF3 = sCurrentLine;
                   
                   
                //Setups up node and outputs the fields of the read node for checking purposes
                NodeHashID = "node" + String.valueOf(NodeCount);
                NodeTable.put(NodeHashID, new NodeData(NodeName, NodeF1, NodeF2, NodeF3));
                NodeTable.get(NodeHashID).nodePrint();             
            } //End <node> Tag
                         
            //<edge> tags and info   
            if(sCurrentLine.compareTo("<edge>") == 0)
            {               
                sCurrentLine = br.readLine();
                                              
                String[] tokens;
                
                //Splits the string at the ',' so two tokens are made (parent, child)
                while(sCurrentLine.compareTo("<<>>") != 0)
                {
                    EdgeCount++;
                    tokens = sCurrentLine.split(",");
                    
                    //Setups up node and outputs the fields of the read node for checking purposes (should implement the edgeprint)
                    EdgeHashID = "edge" + String.valueOf(EdgeCount);
                    EdgeTable.put(EdgeHashID, new EdgeData(EdgeCount, tokens[0].toLowerCase(), tokens[1].toLowerCase()));
                    System.out.println("Edge " + EdgeCount + " Is connected between: " + EdgeTable.get(EdgeHashID).getParent() + " and " + EdgeTable.get(EdgeHashID).getChild());
                    
                    sCurrentLine = br.readLine();
                }//end edge loop
            }//end <edge> tag
        }//end while
   
    }//end try
    
    
    //No idea what this does
    catch (IOException e) 
    {
    } 
    
    finally 
    {
        try 
        {
            if (br != null) 
            {
                br.close();
            }
        } 
        catch (IOException ex) {}
    }  
}
}
