/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jung1;

import java.io.*;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JFrame;


/**
 *
 * @author Brett
 */
public class FileRead {
    //Two hashmaps for nodes and edges
//    private HashMap<String, NodeData> NodeTable = new HashMap<>();
//    private HashMap<String, EdgeData> EdgeTable = new HashMap<>();  
    
  public File FileChooser(){
        JFrame openFrame = new JFrame();
        JFileChooser fileDialog = new JFileChooser(".");
        int openChoice = fileDialog.showOpenDialog(openFrame);        
        File selectedFile = null;
        
        
        if (openChoice == JFileChooser.APPROVE_OPTION)
        {
            selectedFile = fileDialog.getSelectedFile();
            System.out.print(selectedFile + " Read Succesfully \n");
        }
        else
        {
            //error options not implemented yet
        }
        
        return selectedFile;
    }     
    
    
    /**
     *
     * @param ChosenFile
     */
    public void FileRead(Map<String, NodeData> NodeTable, Map<String, EdgeData> EdgeTable)        
  {   
    BufferedReader br = null;
   
    try {
     //Varibles to use could be cut down some 
     String sCurrentLine;
     String NodeHashID;
     String EdgeHashID;
     String NodeName;
     String NodeStatus;
     Integer NodeCount = 0;
     Integer EdgeCount = 0;
   
     //File Chooser *needs to inform user*
     br = new BufferedReader(new FileReader(FileChooser()));
   
     while ((sCurrentLine = br.readLine()) != null) 
           {
                     
               if( sCurrentLine.compareTo("<node>") == 0)
                {
                    
                   /* <Node> tag Contains the following
                    *   Name - string
                    *   SwitchID - int
                    *   Status - string
                    */
                   
                    //Node Initialization
//                  NodeTable.put(Name String, generated ID, Status String);
                   
                   //iterate nodecount
                   NodeCount++;       
                    
                   //Name Read
                   sCurrentLine = br.readLine();
                   NodeName = sCurrentLine.toLowerCase();                         
                   
                   //Status Read
                   sCurrentLine = br.readLine();
                   NodeStatus = sCurrentLine.toLowerCase();
                   
                   
                   //Setups up node and outputs the fields of the read node for checking purposes
                   NodeHashID = "node" + String.valueOf(NodeCount);
                   NodeTable.put(NodeHashID, new NodeData(NodeName, NodeCount, NodeStatus)); 
                   System.out.println("Node ID: " + NodeTable.get(NodeHashID).getID());
                   System.out.println("Node Name: " + NodeTable.get(NodeHashID).getName());
                   System.out.println("Node Status: " + NodeTable.get(NodeHashID).getStatus());
                 
              } //End <node> Tag
                         
               
            if(sCurrentLine.compareTo("<edge>") == 0)
             {               
                sCurrentLine = br.readLine();
                                              
                String[] tokens;
                
                while(sCurrentLine.compareTo("<<>>") != 0)
                {
                   EdgeCount++;
                   tokens = sCurrentLine.split(",");
                    
                   //Setups up node and outputs the fields of the read node for checking purposes
                   EdgeHashID = "edge" + String.valueOf(EdgeCount);
                   EdgeTable.put(EdgeHashID, new EdgeData(EdgeCount, tokens[0].toLowerCase(), tokens[1].toLowerCase()));
                   System.out.println("Edge " + EdgeCount + " Is connected between: " + EdgeTable.get(EdgeHashID).getParent() + " and " + EdgeTable.get(EdgeHashID).getChild());
                    
                   sCurrentLine = br.readLine();
                }//end edge loop
             }//end <edge> tag
           }//end while
   
    } catch (IOException e) {
    } finally {
     try {
      if (br != null) {
                   br.close();
               }
     } catch (IOException ex) {
     }
    }  
  }

public static void main(String[] args)
{
//        FileRead finput = new FileRead();
//        finput.FileRead();
//        System.out.println("End of FileRead");
//        System.exit(0);
}

}
